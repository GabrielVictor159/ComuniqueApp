{"version":3,"sources":["DrawerView.tsx"],"names":["getHeaderTitle","Header","SafeAreaProviderCompat","Screen","DrawerActions","useTheme","React","BackHandler","I18nManager","Platform","StyleSheet","View","Reanimated","useSafeAreaFrame","DrawerPositionContext","DrawerStatusContext","getDrawerStatusFromState","DrawerContent","DrawerToggleButton","GestureHandlerRootView","MaybeScreen","MaybeScreenContainer","getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","OS","maxWidth","GestureHandlerWrapper","DrawerViewBase","state","navigation","descriptors","defaultStatus","drawerContent","props","detachInactiveScreens","useLegacyImplementation","isConfigured","legacyImplemenationNotAvailable","require","abs","undefined","Error","Drawer","default","focusedRouteKey","routes","index","key","drawerHideStatusBarOnOpen","drawerPosition","getConstants","isRTL","drawerStatusBarAnimation","drawerStyle","drawerType","select","ios","gestureHandlerProps","keyboardDismissMode","overlayColor","swipeEdgeWidth","swipeEnabled","swipeMinDistance","options","loaded","setLoaded","useState","includes","dimensions","colors","drawerStatus","handleDrawerOpen","useCallback","dispatch","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","handleHardwareBack","isFocused","handleEscape","e","subscription","addEventListener","document","body","remove","removeEventListener","renderDrawerContent","renderSceneContent","styles","content","map","route","descriptor","lazy","unmountOnBlur","freezeOnBlur","header","layout","name","headerLeft","headerShown","headerStatusBarHeight","headerTransparent","sceneContainerStyle","absoluteFill","zIndex","render","backgroundColor","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","DrawerView","rest","create","flex"],"mappings":"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","sourcesContent":["import {\n  getHeaderTitle,\n  Header,\n  SafeAreaProviderCompat,\n  Screen,\n} from '@react-navigation/elements';\nimport {\n  DrawerActions,\n  DrawerNavigationState,\n  DrawerStatus,\n  ParamListBase,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  BackHandler,\n  I18nManager,\n  Platform,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport * as Reanimated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\n\nimport type {\n  DrawerContentComponentProps,\n  DrawerDescriptorMap,\n  DrawerHeaderProps,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerNavigationProp,\n  DrawerProps,\n} from '../types';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport DrawerStatusContext from '../utils/DrawerStatusContext';\nimport getDrawerStatusFromState from '../utils/getDrawerStatusFromState';\nimport DrawerContent from './DrawerContent';\nimport DrawerToggleButton from './DrawerToggleButton';\nimport { GestureHandlerRootView } from './GestureHandler';\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\n\ntype Props = DrawerNavigationConfig & {\n  defaultStatus: DrawerStatus;\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nfunction DrawerViewBase({\n  state,\n  navigation,\n  descriptors,\n  defaultStatus,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  detachInactiveScreens = Platform.OS === 'web' ||\n    Platform.OS === 'android' ||\n    Platform.OS === 'ios',\n  // Reanimated 2 is not configured\n  // @ts-expect-error: the type definitions are incomplete\n  useLegacyImplementation = !Reanimated.isConfigured?.(),\n}: Props) {\n  // Reanimated v3 dropped legacy v1 syntax\n  const legacyImplemenationNotAvailable =\n    require('react-native-reanimated').abs === undefined;\n\n  if (useLegacyImplementation && legacyImplemenationNotAvailable) {\n    throw new Error(\n      'The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.'\n    );\n  }\n\n  const Drawer: React.ComponentType<DrawerProps> = useLegacyImplementation\n    ? require('./legacy/Drawer').default\n    : require('./modern/Drawer').default;\n\n  const focusedRouteKey = state.routes[state.index].key;\n  const {\n    drawerHideStatusBarOnOpen = false,\n    drawerPosition = I18nManager.getConstants().isRTL ? 'right' : 'left',\n    drawerStatusBarAnimation = 'slide',\n    drawerStyle,\n    drawerType = Platform.select({ ios: 'slide', default: 'front' }),\n    gestureHandlerProps,\n    keyboardDismissMode = 'on-drag',\n    overlayColor = 'rgba(0, 0, 0, 0.5)',\n    swipeEdgeWidth = 32,\n    swipeEnabled = Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n    swipeMinDistance = 60,\n  } = descriptors[focusedRouteKey].options;\n\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const dimensions = useSafeAreaFrame();\n\n  const { colors } = useTheme();\n\n  const drawerStatus = getDrawerStatusFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n\n    const handleHardwareBack = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n\n      return true;\n    };\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    const subscription = BackHandler.addEventListener(\n      'hardwareBackPress',\n      handleHardwareBack\n    );\n\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', handleEscape);\n    }\n\n    return () => {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        document?.body?.removeEventListener?.('keyup', handleEscape);\n      }\n    };\n  }, [\n    defaultStatus,\n    drawerStatus,\n    drawerType,\n    handleDrawerClose,\n    handleDrawerOpen,\n    navigation,\n  ]);\n\n  const renderDrawerContent = () => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderSceneContent = () => {\n    return (\n      <MaybeScreenContainer\n        enabled={detachInactiveScreens}\n        hasTwoStates\n        style={styles.content}\n      >\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { lazy = true, unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a lazy screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            freezeOnBlur,\n            header = ({ layout, options }: DrawerHeaderProps) => (\n              <Header\n                {...options}\n                layout={layout}\n                title={getHeaderTitle(options, route.name)}\n                headerLeft={\n                  options.headerLeft ??\n                  ((props) => <DrawerToggleButton {...props} />)\n                }\n              />\n            ),\n            headerShown,\n            headerStatusBarHeight,\n            headerTransparent,\n            sceneContainerStyle,\n          } = descriptor.options;\n\n          return (\n            <MaybeScreen\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { zIndex: isFocused ? 0 : -1 }]}\n              visible={isFocused}\n              enabled={detachInactiveScreens}\n              freezeOnBlur={freezeOnBlur}\n            >\n              <Screen\n                focused={isFocused}\n                route={descriptor.route}\n                navigation={descriptor.navigation}\n                headerShown={headerShown}\n                headerStatusBarHeight={headerStatusBarHeight}\n                headerTransparent={headerTransparent}\n                header={header({\n                  layout: dimensions,\n                  route: descriptor.route,\n                  navigation:\n                    descriptor.navigation as DrawerNavigationProp<ParamListBase>,\n                  options: descriptor.options,\n                })}\n                style={sceneContainerStyle}\n              >\n                {descriptor.render()}\n              </Screen>\n            </MaybeScreen>\n          );\n        })}\n      </MaybeScreenContainer>\n    );\n  };\n\n  return (\n    <DrawerStatusContext.Provider value={drawerStatus}>\n      <Drawer\n        open={drawerStatus !== 'closed'}\n        onOpen={handleDrawerOpen}\n        onClose={handleDrawerClose}\n        gestureHandlerProps={gestureHandlerProps}\n        swipeEnabled={swipeEnabled}\n        swipeEdgeWidth={swipeEdgeWidth}\n        swipeVelocityThreshold={500}\n        swipeDistanceThreshold={swipeMinDistance}\n        hideStatusBarOnOpen={drawerHideStatusBarOnOpen}\n        statusBarAnimation={drawerStatusBarAnimation}\n        keyboardDismissMode={keyboardDismissMode}\n        drawerType={drawerType}\n        drawerPosition={drawerPosition}\n        drawerStyle={[\n          {\n            width: getDefaultDrawerWidth(dimensions),\n            backgroundColor: colors.card,\n          },\n          drawerType === 'permanent' &&\n            (drawerPosition === 'left'\n              ? {\n                  borderRightColor: colors.border,\n                  borderRightWidth: StyleSheet.hairlineWidth,\n                }\n              : {\n                  borderLeftColor: colors.border,\n                  borderLeftWidth: StyleSheet.hairlineWidth,\n                }),\n          drawerStyle,\n        ]}\n        overlayStyle={{ backgroundColor: overlayColor }}\n        renderDrawerContent={renderDrawerContent}\n        renderSceneContent={renderSceneContent}\n        dimensions={dimensions}\n      />\n    </DrawerStatusContext.Provider>\n  );\n}\n\nexport default function DrawerView({ navigation, ...rest }: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <GestureHandlerWrapper style={styles.content}>\n        <DrawerViewBase navigation={navigation} {...rest} />\n      </GestureHandlerWrapper>\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]}